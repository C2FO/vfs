// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	s3 "github.com/aws/aws-sdk-go/service/s3"

	s3manager "github.com/aws/aws-sdk-go/service/s3/s3manager"
)

// Downloader is an autogenerated mock type for the Downloader type
type Downloader struct {
	mock.Mock
}

type Downloader_Expecter struct {
	mock *mock.Mock
}

func (_m *Downloader) EXPECT() *Downloader_Expecter {
	return &Downloader_Expecter{mock: &_m.Mock}
}

// DownloadWithContext provides a mock function with given fields: ctx, w, input, options
func (_m *Downloader) DownloadWithContext(ctx context.Context, w io.WriterAt, input *s3.GetObjectInput, options ...func(*s3manager.Downloader)) (int64, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, w, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DownloadWithContext")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, io.WriterAt, *s3.GetObjectInput, ...func(*s3manager.Downloader)) (int64, error)); ok {
		return rf(ctx, w, input, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, io.WriterAt, *s3.GetObjectInput, ...func(*s3manager.Downloader)) int64); ok {
		r0 = rf(ctx, w, input, options...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, io.WriterAt, *s3.GetObjectInput, ...func(*s3manager.Downloader)) error); ok {
		r1 = rf(ctx, w, input, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Downloader_DownloadWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadWithContext'
type Downloader_DownloadWithContext_Call struct {
	*mock.Call
}

// DownloadWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - w io.WriterAt
//   - input *s3.GetObjectInput
//   - options ...func(*s3manager.Downloader)
func (_e *Downloader_Expecter) DownloadWithContext(ctx interface{}, w interface{}, input interface{}, options ...interface{}) *Downloader_DownloadWithContext_Call {
	return &Downloader_DownloadWithContext_Call{Call: _e.mock.On("DownloadWithContext",
		append([]interface{}{ctx, w, input}, options...)...)}
}

func (_c *Downloader_DownloadWithContext_Call) Run(run func(ctx context.Context, w io.WriterAt, input *s3.GetObjectInput, options ...func(*s3manager.Downloader))) *Downloader_DownloadWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*s3manager.Downloader), len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(func(*s3manager.Downloader))
			}
		}
		run(args[0].(context.Context), args[1].(io.WriterAt), args[2].(*s3.GetObjectInput), variadicArgs...)
	})
	return _c
}

func (_c *Downloader_DownloadWithContext_Call) Return(n int64, err error) *Downloader_DownloadWithContext_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *Downloader_DownloadWithContext_Call) RunAndReturn(run func(context.Context, io.WriterAt, *s3.GetObjectInput, ...func(*s3manager.Downloader)) (int64, error)) *Downloader_DownloadWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewDownloader creates a new instance of Downloader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDownloader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Downloader {
	mock := &Downloader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
