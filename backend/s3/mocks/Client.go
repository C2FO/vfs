// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/s3"
	mock "github.com/stretchr/testify/mock"
)

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// AbortMultipartUpload provides a mock function for the type Client
func (_mock *Client) AbortMultipartUpload(context1 context.Context, abortMultipartUploadInput *s3.AbortMultipartUploadInput, fns ...func(*s3.Options)) (*s3.AbortMultipartUploadOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, abortMultipartUploadInput, fns)
	} else {
		tmpRet = _mock.Called(context1, abortMultipartUploadInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AbortMultipartUpload")
	}

	var r0 *s3.AbortMultipartUploadOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.AbortMultipartUploadInput, ...func(*s3.Options)) (*s3.AbortMultipartUploadOutput, error)); ok {
		return returnFunc(context1, abortMultipartUploadInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.AbortMultipartUploadInput, ...func(*s3.Options)) *s3.AbortMultipartUploadOutput); ok {
		r0 = returnFunc(context1, abortMultipartUploadInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.AbortMultipartUploadOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.AbortMultipartUploadInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(context1, abortMultipartUploadInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_AbortMultipartUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortMultipartUpload'
type Client_AbortMultipartUpload_Call struct {
	*mock.Call
}

// AbortMultipartUpload is a helper method to define mock.On call
//   - context1 context.Context
//   - abortMultipartUploadInput *s3.AbortMultipartUploadInput
//   - fns ...func(*s3.Options)
func (_e *Client_Expecter) AbortMultipartUpload(context1 interface{}, abortMultipartUploadInput interface{}, fns ...interface{}) *Client_AbortMultipartUpload_Call {
	return &Client_AbortMultipartUpload_Call{Call: _e.mock.On("AbortMultipartUpload",
		append([]interface{}{context1, abortMultipartUploadInput}, fns...)...)}
}

func (_c *Client_AbortMultipartUpload_Call) Run(run func(context1 context.Context, abortMultipartUploadInput *s3.AbortMultipartUploadInput, fns ...func(*s3.Options))) *Client_AbortMultipartUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.AbortMultipartUploadInput
		if args[1] != nil {
			arg1 = args[1].(*s3.AbortMultipartUploadInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Client_AbortMultipartUpload_Call) Return(abortMultipartUploadOutput *s3.AbortMultipartUploadOutput, err error) *Client_AbortMultipartUpload_Call {
	_c.Call.Return(abortMultipartUploadOutput, err)
	return _c
}

func (_c *Client_AbortMultipartUpload_Call) RunAndReturn(run func(context1 context.Context, abortMultipartUploadInput *s3.AbortMultipartUploadInput, fns ...func(*s3.Options)) (*s3.AbortMultipartUploadOutput, error)) *Client_AbortMultipartUpload_Call {
	_c.Call.Return(run)
	return _c
}

// CompleteMultipartUpload provides a mock function for the type Client
func (_mock *Client) CompleteMultipartUpload(context1 context.Context, completeMultipartUploadInput *s3.CompleteMultipartUploadInput, fns ...func(*s3.Options)) (*s3.CompleteMultipartUploadOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, completeMultipartUploadInput, fns)
	} else {
		tmpRet = _mock.Called(context1, completeMultipartUploadInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CompleteMultipartUpload")
	}

	var r0 *s3.CompleteMultipartUploadOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.CompleteMultipartUploadInput, ...func(*s3.Options)) (*s3.CompleteMultipartUploadOutput, error)); ok {
		return returnFunc(context1, completeMultipartUploadInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.CompleteMultipartUploadInput, ...func(*s3.Options)) *s3.CompleteMultipartUploadOutput); ok {
		r0 = returnFunc(context1, completeMultipartUploadInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.CompleteMultipartUploadOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.CompleteMultipartUploadInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(context1, completeMultipartUploadInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_CompleteMultipartUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteMultipartUpload'
type Client_CompleteMultipartUpload_Call struct {
	*mock.Call
}

// CompleteMultipartUpload is a helper method to define mock.On call
//   - context1 context.Context
//   - completeMultipartUploadInput *s3.CompleteMultipartUploadInput
//   - fns ...func(*s3.Options)
func (_e *Client_Expecter) CompleteMultipartUpload(context1 interface{}, completeMultipartUploadInput interface{}, fns ...interface{}) *Client_CompleteMultipartUpload_Call {
	return &Client_CompleteMultipartUpload_Call{Call: _e.mock.On("CompleteMultipartUpload",
		append([]interface{}{context1, completeMultipartUploadInput}, fns...)...)}
}

func (_c *Client_CompleteMultipartUpload_Call) Run(run func(context1 context.Context, completeMultipartUploadInput *s3.CompleteMultipartUploadInput, fns ...func(*s3.Options))) *Client_CompleteMultipartUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.CompleteMultipartUploadInput
		if args[1] != nil {
			arg1 = args[1].(*s3.CompleteMultipartUploadInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Client_CompleteMultipartUpload_Call) Return(completeMultipartUploadOutput *s3.CompleteMultipartUploadOutput, err error) *Client_CompleteMultipartUpload_Call {
	_c.Call.Return(completeMultipartUploadOutput, err)
	return _c
}

func (_c *Client_CompleteMultipartUpload_Call) RunAndReturn(run func(context1 context.Context, completeMultipartUploadInput *s3.CompleteMultipartUploadInput, fns ...func(*s3.Options)) (*s3.CompleteMultipartUploadOutput, error)) *Client_CompleteMultipartUpload_Call {
	_c.Call.Return(run)
	return _c
}

// CopyObject provides a mock function for the type Client
func (_mock *Client) CopyObject(ctx context.Context, in *s3.CopyObjectInput, opts ...func(*s3.Options)) (*s3.CopyObjectOutput, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CopyObject")
	}

	var r0 *s3.CopyObjectOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.CopyObjectInput, ...func(*s3.Options)) (*s3.CopyObjectOutput, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.CopyObjectInput, ...func(*s3.Options)) *s3.CopyObjectOutput); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.CopyObjectOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.CopyObjectInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_CopyObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyObject'
type Client_CopyObject_Call struct {
	*mock.Call
}

// CopyObject is a helper method to define mock.On call
//   - ctx context.Context
//   - in *s3.CopyObjectInput
//   - opts ...func(*s3.Options)
func (_e *Client_Expecter) CopyObject(ctx interface{}, in interface{}, opts ...interface{}) *Client_CopyObject_Call {
	return &Client_CopyObject_Call{Call: _e.mock.On("CopyObject",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Client_CopyObject_Call) Run(run func(ctx context.Context, in *s3.CopyObjectInput, opts ...func(*s3.Options))) *Client_CopyObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.CopyObjectInput
		if args[1] != nil {
			arg1 = args[1].(*s3.CopyObjectInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Client_CopyObject_Call) Return(copyObjectOutput *s3.CopyObjectOutput, err error) *Client_CopyObject_Call {
	_c.Call.Return(copyObjectOutput, err)
	return _c
}

func (_c *Client_CopyObject_Call) RunAndReturn(run func(ctx context.Context, in *s3.CopyObjectInput, opts ...func(*s3.Options)) (*s3.CopyObjectOutput, error)) *Client_CopyObject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMultipartUpload provides a mock function for the type Client
func (_mock *Client) CreateMultipartUpload(context1 context.Context, createMultipartUploadInput *s3.CreateMultipartUploadInput, fns ...func(*s3.Options)) (*s3.CreateMultipartUploadOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, createMultipartUploadInput, fns)
	} else {
		tmpRet = _mock.Called(context1, createMultipartUploadInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateMultipartUpload")
	}

	var r0 *s3.CreateMultipartUploadOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.CreateMultipartUploadInput, ...func(*s3.Options)) (*s3.CreateMultipartUploadOutput, error)); ok {
		return returnFunc(context1, createMultipartUploadInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.CreateMultipartUploadInput, ...func(*s3.Options)) *s3.CreateMultipartUploadOutput); ok {
		r0 = returnFunc(context1, createMultipartUploadInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.CreateMultipartUploadOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.CreateMultipartUploadInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(context1, createMultipartUploadInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_CreateMultipartUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMultipartUpload'
type Client_CreateMultipartUpload_Call struct {
	*mock.Call
}

// CreateMultipartUpload is a helper method to define mock.On call
//   - context1 context.Context
//   - createMultipartUploadInput *s3.CreateMultipartUploadInput
//   - fns ...func(*s3.Options)
func (_e *Client_Expecter) CreateMultipartUpload(context1 interface{}, createMultipartUploadInput interface{}, fns ...interface{}) *Client_CreateMultipartUpload_Call {
	return &Client_CreateMultipartUpload_Call{Call: _e.mock.On("CreateMultipartUpload",
		append([]interface{}{context1, createMultipartUploadInput}, fns...)...)}
}

func (_c *Client_CreateMultipartUpload_Call) Run(run func(context1 context.Context, createMultipartUploadInput *s3.CreateMultipartUploadInput, fns ...func(*s3.Options))) *Client_CreateMultipartUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.CreateMultipartUploadInput
		if args[1] != nil {
			arg1 = args[1].(*s3.CreateMultipartUploadInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Client_CreateMultipartUpload_Call) Return(createMultipartUploadOutput *s3.CreateMultipartUploadOutput, err error) *Client_CreateMultipartUpload_Call {
	_c.Call.Return(createMultipartUploadOutput, err)
	return _c
}

func (_c *Client_CreateMultipartUpload_Call) RunAndReturn(run func(context1 context.Context, createMultipartUploadInput *s3.CreateMultipartUploadInput, fns ...func(*s3.Options)) (*s3.CreateMultipartUploadOutput, error)) *Client_CreateMultipartUpload_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObject provides a mock function for the type Client
func (_mock *Client) DeleteObject(ctx context.Context, in *s3.DeleteObjectInput, opts ...func(*s3.Options)) (*s3.DeleteObjectOutput, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteObject")
	}

	var r0 *s3.DeleteObjectOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.DeleteObjectInput, ...func(*s3.Options)) (*s3.DeleteObjectOutput, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.DeleteObjectInput, ...func(*s3.Options)) *s3.DeleteObjectOutput); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.DeleteObjectOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.DeleteObjectInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_DeleteObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObject'
type Client_DeleteObject_Call struct {
	*mock.Call
}

// DeleteObject is a helper method to define mock.On call
//   - ctx context.Context
//   - in *s3.DeleteObjectInput
//   - opts ...func(*s3.Options)
func (_e *Client_Expecter) DeleteObject(ctx interface{}, in interface{}, opts ...interface{}) *Client_DeleteObject_Call {
	return &Client_DeleteObject_Call{Call: _e.mock.On("DeleteObject",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Client_DeleteObject_Call) Run(run func(ctx context.Context, in *s3.DeleteObjectInput, opts ...func(*s3.Options))) *Client_DeleteObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.DeleteObjectInput
		if args[1] != nil {
			arg1 = args[1].(*s3.DeleteObjectInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Client_DeleteObject_Call) Return(deleteObjectOutput *s3.DeleteObjectOutput, err error) *Client_DeleteObject_Call {
	_c.Call.Return(deleteObjectOutput, err)
	return _c
}

func (_c *Client_DeleteObject_Call) RunAndReturn(run func(ctx context.Context, in *s3.DeleteObjectInput, opts ...func(*s3.Options)) (*s3.DeleteObjectOutput, error)) *Client_DeleteObject_Call {
	_c.Call.Return(run)
	return _c
}

// GetObject provides a mock function for the type Client
func (_mock *Client) GetObject(context1 context.Context, getObjectInput *s3.GetObjectInput, fns ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, getObjectInput, fns)
	} else {
		tmpRet = _mock.Called(context1, getObjectInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 *s3.GetObjectOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetObjectInput, ...func(*s3.Options)) (*s3.GetObjectOutput, error)); ok {
		return returnFunc(context1, getObjectInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.GetObjectInput, ...func(*s3.Options)) *s3.GetObjectOutput); ok {
		r0 = returnFunc(context1, getObjectInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.GetObjectOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.GetObjectInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(context1, getObjectInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type Client_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - context1 context.Context
//   - getObjectInput *s3.GetObjectInput
//   - fns ...func(*s3.Options)
func (_e *Client_Expecter) GetObject(context1 interface{}, getObjectInput interface{}, fns ...interface{}) *Client_GetObject_Call {
	return &Client_GetObject_Call{Call: _e.mock.On("GetObject",
		append([]interface{}{context1, getObjectInput}, fns...)...)}
}

func (_c *Client_GetObject_Call) Run(run func(context1 context.Context, getObjectInput *s3.GetObjectInput, fns ...func(*s3.Options))) *Client_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.GetObjectInput
		if args[1] != nil {
			arg1 = args[1].(*s3.GetObjectInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Client_GetObject_Call) Return(getObjectOutput *s3.GetObjectOutput, err error) *Client_GetObject_Call {
	_c.Call.Return(getObjectOutput, err)
	return _c
}

func (_c *Client_GetObject_Call) RunAndReturn(run func(context1 context.Context, getObjectInput *s3.GetObjectInput, fns ...func(*s3.Options)) (*s3.GetObjectOutput, error)) *Client_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// HeadBucket provides a mock function for the type Client
func (_mock *Client) HeadBucket(ctx context.Context, in *s3.HeadBucketInput, opts ...func(*s3.Options)) (*s3.HeadBucketOutput, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for HeadBucket")
	}

	var r0 *s3.HeadBucketOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.HeadBucketInput, ...func(*s3.Options)) (*s3.HeadBucketOutput, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.HeadBucketInput, ...func(*s3.Options)) *s3.HeadBucketOutput); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.HeadBucketOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.HeadBucketInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_HeadBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadBucket'
type Client_HeadBucket_Call struct {
	*mock.Call
}

// HeadBucket is a helper method to define mock.On call
//   - ctx context.Context
//   - in *s3.HeadBucketInput
//   - opts ...func(*s3.Options)
func (_e *Client_Expecter) HeadBucket(ctx interface{}, in interface{}, opts ...interface{}) *Client_HeadBucket_Call {
	return &Client_HeadBucket_Call{Call: _e.mock.On("HeadBucket",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Client_HeadBucket_Call) Run(run func(ctx context.Context, in *s3.HeadBucketInput, opts ...func(*s3.Options))) *Client_HeadBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.HeadBucketInput
		if args[1] != nil {
			arg1 = args[1].(*s3.HeadBucketInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Client_HeadBucket_Call) Return(headBucketOutput *s3.HeadBucketOutput, err error) *Client_HeadBucket_Call {
	_c.Call.Return(headBucketOutput, err)
	return _c
}

func (_c *Client_HeadBucket_Call) RunAndReturn(run func(ctx context.Context, in *s3.HeadBucketInput, opts ...func(*s3.Options)) (*s3.HeadBucketOutput, error)) *Client_HeadBucket_Call {
	_c.Call.Return(run)
	return _c
}

// HeadObject provides a mock function for the type Client
func (_mock *Client) HeadObject(ctx context.Context, in *s3.HeadObjectInput, opts ...func(*s3.Options)) (*s3.HeadObjectOutput, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for HeadObject")
	}

	var r0 *s3.HeadObjectOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.HeadObjectInput, ...func(*s3.Options)) (*s3.HeadObjectOutput, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.HeadObjectInput, ...func(*s3.Options)) *s3.HeadObjectOutput); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.HeadObjectOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.HeadObjectInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_HeadObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadObject'
type Client_HeadObject_Call struct {
	*mock.Call
}

// HeadObject is a helper method to define mock.On call
//   - ctx context.Context
//   - in *s3.HeadObjectInput
//   - opts ...func(*s3.Options)
func (_e *Client_Expecter) HeadObject(ctx interface{}, in interface{}, opts ...interface{}) *Client_HeadObject_Call {
	return &Client_HeadObject_Call{Call: _e.mock.On("HeadObject",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Client_HeadObject_Call) Run(run func(ctx context.Context, in *s3.HeadObjectInput, opts ...func(*s3.Options))) *Client_HeadObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.HeadObjectInput
		if args[1] != nil {
			arg1 = args[1].(*s3.HeadObjectInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Client_HeadObject_Call) Return(headObjectOutput *s3.HeadObjectOutput, err error) *Client_HeadObject_Call {
	_c.Call.Return(headObjectOutput, err)
	return _c
}

func (_c *Client_HeadObject_Call) RunAndReturn(run func(ctx context.Context, in *s3.HeadObjectInput, opts ...func(*s3.Options)) (*s3.HeadObjectOutput, error)) *Client_HeadObject_Call {
	_c.Call.Return(run)
	return _c
}

// ListObjectVersions provides a mock function for the type Client
func (_mock *Client) ListObjectVersions(ctx context.Context, in *s3.ListObjectVersionsInput, opts ...func(*s3.Options)) (*s3.ListObjectVersionsOutput, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListObjectVersions")
	}

	var r0 *s3.ListObjectVersionsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.ListObjectVersionsInput, ...func(*s3.Options)) (*s3.ListObjectVersionsOutput, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.ListObjectVersionsInput, ...func(*s3.Options)) *s3.ListObjectVersionsOutput); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.ListObjectVersionsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.ListObjectVersionsInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_ListObjectVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListObjectVersions'
type Client_ListObjectVersions_Call struct {
	*mock.Call
}

// ListObjectVersions is a helper method to define mock.On call
//   - ctx context.Context
//   - in *s3.ListObjectVersionsInput
//   - opts ...func(*s3.Options)
func (_e *Client_Expecter) ListObjectVersions(ctx interface{}, in interface{}, opts ...interface{}) *Client_ListObjectVersions_Call {
	return &Client_ListObjectVersions_Call{Call: _e.mock.On("ListObjectVersions",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Client_ListObjectVersions_Call) Run(run func(ctx context.Context, in *s3.ListObjectVersionsInput, opts ...func(*s3.Options))) *Client_ListObjectVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.ListObjectVersionsInput
		if args[1] != nil {
			arg1 = args[1].(*s3.ListObjectVersionsInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Client_ListObjectVersions_Call) Return(listObjectVersionsOutput *s3.ListObjectVersionsOutput, err error) *Client_ListObjectVersions_Call {
	_c.Call.Return(listObjectVersionsOutput, err)
	return _c
}

func (_c *Client_ListObjectVersions_Call) RunAndReturn(run func(ctx context.Context, in *s3.ListObjectVersionsInput, opts ...func(*s3.Options)) (*s3.ListObjectVersionsOutput, error)) *Client_ListObjectVersions_Call {
	_c.Call.Return(run)
	return _c
}

// ListObjects provides a mock function for the type Client
func (_mock *Client) ListObjects(ctx context.Context, in *s3.ListObjectsInput, opts ...func(*s3.Options)) (*s3.ListObjectsOutput, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListObjects")
	}

	var r0 *s3.ListObjectsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.ListObjectsInput, ...func(*s3.Options)) (*s3.ListObjectsOutput, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.ListObjectsInput, ...func(*s3.Options)) *s3.ListObjectsOutput); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.ListObjectsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.ListObjectsInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_ListObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListObjects'
type Client_ListObjects_Call struct {
	*mock.Call
}

// ListObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - in *s3.ListObjectsInput
//   - opts ...func(*s3.Options)
func (_e *Client_Expecter) ListObjects(ctx interface{}, in interface{}, opts ...interface{}) *Client_ListObjects_Call {
	return &Client_ListObjects_Call{Call: _e.mock.On("ListObjects",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Client_ListObjects_Call) Run(run func(ctx context.Context, in *s3.ListObjectsInput, opts ...func(*s3.Options))) *Client_ListObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.ListObjectsInput
		if args[1] != nil {
			arg1 = args[1].(*s3.ListObjectsInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Client_ListObjects_Call) Return(listObjectsOutput *s3.ListObjectsOutput, err error) *Client_ListObjects_Call {
	_c.Call.Return(listObjectsOutput, err)
	return _c
}

func (_c *Client_ListObjects_Call) RunAndReturn(run func(ctx context.Context, in *s3.ListObjectsInput, opts ...func(*s3.Options)) (*s3.ListObjectsOutput, error)) *Client_ListObjects_Call {
	_c.Call.Return(run)
	return _c
}

// PutObject provides a mock function for the type Client
func (_mock *Client) PutObject(context1 context.Context, putObjectInput *s3.PutObjectInput, fns ...func(*s3.Options)) (*s3.PutObjectOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, putObjectInput, fns)
	} else {
		tmpRet = _mock.Called(context1, putObjectInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 *s3.PutObjectOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.PutObjectInput, ...func(*s3.Options)) (*s3.PutObjectOutput, error)); ok {
		return returnFunc(context1, putObjectInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.PutObjectInput, ...func(*s3.Options)) *s3.PutObjectOutput); ok {
		r0 = returnFunc(context1, putObjectInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.PutObjectOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.PutObjectInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(context1, putObjectInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_PutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObject'
type Client_PutObject_Call struct {
	*mock.Call
}

// PutObject is a helper method to define mock.On call
//   - context1 context.Context
//   - putObjectInput *s3.PutObjectInput
//   - fns ...func(*s3.Options)
func (_e *Client_Expecter) PutObject(context1 interface{}, putObjectInput interface{}, fns ...interface{}) *Client_PutObject_Call {
	return &Client_PutObject_Call{Call: _e.mock.On("PutObject",
		append([]interface{}{context1, putObjectInput}, fns...)...)}
}

func (_c *Client_PutObject_Call) Run(run func(context1 context.Context, putObjectInput *s3.PutObjectInput, fns ...func(*s3.Options))) *Client_PutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.PutObjectInput
		if args[1] != nil {
			arg1 = args[1].(*s3.PutObjectInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Client_PutObject_Call) Return(putObjectOutput *s3.PutObjectOutput, err error) *Client_PutObject_Call {
	_c.Call.Return(putObjectOutput, err)
	return _c
}

func (_c *Client_PutObject_Call) RunAndReturn(run func(context1 context.Context, putObjectInput *s3.PutObjectInput, fns ...func(*s3.Options)) (*s3.PutObjectOutput, error)) *Client_PutObject_Call {
	_c.Call.Return(run)
	return _c
}

// UploadPart provides a mock function for the type Client
func (_mock *Client) UploadPart(context1 context.Context, uploadPartInput *s3.UploadPartInput, fns ...func(*s3.Options)) (*s3.UploadPartOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, uploadPartInput, fns)
	} else {
		tmpRet = _mock.Called(context1, uploadPartInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UploadPart")
	}

	var r0 *s3.UploadPartOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.UploadPartInput, ...func(*s3.Options)) (*s3.UploadPartOutput, error)); ok {
		return returnFunc(context1, uploadPartInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *s3.UploadPartInput, ...func(*s3.Options)) *s3.UploadPartOutput); ok {
		r0 = returnFunc(context1, uploadPartInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.UploadPartOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *s3.UploadPartInput, ...func(*s3.Options)) error); ok {
		r1 = returnFunc(context1, uploadPartInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_UploadPart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadPart'
type Client_UploadPart_Call struct {
	*mock.Call
}

// UploadPart is a helper method to define mock.On call
//   - context1 context.Context
//   - uploadPartInput *s3.UploadPartInput
//   - fns ...func(*s3.Options)
func (_e *Client_Expecter) UploadPart(context1 interface{}, uploadPartInput interface{}, fns ...interface{}) *Client_UploadPart_Call {
	return &Client_UploadPart_Call{Call: _e.mock.On("UploadPart",
		append([]interface{}{context1, uploadPartInput}, fns...)...)}
}

func (_c *Client_UploadPart_Call) Run(run func(context1 context.Context, uploadPartInput *s3.UploadPartInput, fns ...func(*s3.Options))) *Client_UploadPart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *s3.UploadPartInput
		if args[1] != nil {
			arg1 = args[1].(*s3.UploadPartInput)
		}
		var arg2 []func(*s3.Options)
		var variadicArgs []func(*s3.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*s3.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Client_UploadPart_Call) Return(uploadPartOutput *s3.UploadPartOutput, err error) *Client_UploadPart_Call {
	_c.Call.Return(uploadPartOutput, err)
	return _c
}

func (_c *Client_UploadPart_Call) RunAndReturn(run func(context1 context.Context, uploadPartInput *s3.UploadPartInput, fns ...func(*s3.Options)) (*s3.UploadPartOutput, error)) *Client_UploadPart_Call {
	_c.Call.Return(run)
	return _c
}
