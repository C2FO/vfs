// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	aws "github.com/aws/aws-sdk-go/aws"
	mock "github.com/stretchr/testify/mock"

	s3manager "github.com/aws/aws-sdk-go/service/s3/s3manager"
)

// UploaderAPI is an autogenerated mock type for the UploaderAPI type
type UploaderAPI struct {
	mock.Mock
}

type UploaderAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *UploaderAPI) EXPECT() *UploaderAPI_Expecter {
	return &UploaderAPI_Expecter{mock: &_m.Mock}
}

// Upload provides a mock function with given fields: _a0, _a1
func (_m *UploaderAPI) Upload(_a0 *s3manager.UploadInput, _a1 ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 *s3manager.UploadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*s3manager.UploadInput, ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(*s3manager.UploadInput, ...func(*s3manager.Uploader)) *s3manager.UploadOutput); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3manager.UploadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*s3manager.UploadInput, ...func(*s3manager.Uploader)) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploaderAPI_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type UploaderAPI_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - _a0 *s3manager.UploadInput
//   - _a1 ...func(*s3manager.Uploader)
func (_e *UploaderAPI_Expecter) Upload(_a0 interface{}, _a1 ...interface{}) *UploaderAPI_Upload_Call {
	return &UploaderAPI_Upload_Call{Call: _e.mock.On("Upload",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *UploaderAPI_Upload_Call) Run(run func(_a0 *s3manager.UploadInput, _a1 ...func(*s3manager.Uploader))) *UploaderAPI_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*s3manager.Uploader), len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(func(*s3manager.Uploader))
			}
		}
		run(args[0].(*s3manager.UploadInput), variadicArgs...)
	})
	return _c
}

func (_c *UploaderAPI_Upload_Call) Return(_a0 *s3manager.UploadOutput, _a1 error) *UploaderAPI_Upload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UploaderAPI_Upload_Call) RunAndReturn(run func(*s3manager.UploadInput, ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)) *UploaderAPI_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// UploadWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *UploaderAPI) UploadWithContext(_a0 aws.Context, _a1 *s3manager.UploadInput, _a2 ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UploadWithContext")
	}

	var r0 *s3manager.UploadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(aws.Context, *s3manager.UploadInput, ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(aws.Context, *s3manager.UploadInput, ...func(*s3manager.Uploader)) *s3manager.UploadOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3manager.UploadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(aws.Context, *s3manager.UploadInput, ...func(*s3manager.Uploader)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploaderAPI_UploadWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadWithContext'
type UploaderAPI_UploadWithContext_Call struct {
	*mock.Call
}

// UploadWithContext is a helper method to define mock.On call
//   - _a0 aws.Context
//   - _a1 *s3manager.UploadInput
//   - _a2 ...func(*s3manager.Uploader)
func (_e *UploaderAPI_Expecter) UploadWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *UploaderAPI_UploadWithContext_Call {
	return &UploaderAPI_UploadWithContext_Call{Call: _e.mock.On("UploadWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *UploaderAPI_UploadWithContext_Call) Run(run func(_a0 aws.Context, _a1 *s3manager.UploadInput, _a2 ...func(*s3manager.Uploader))) *UploaderAPI_UploadWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*s3manager.Uploader), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*s3manager.Uploader))
			}
		}
		run(args[0].(aws.Context), args[1].(*s3manager.UploadInput), variadicArgs...)
	})
	return _c
}

func (_c *UploaderAPI_UploadWithContext_Call) Return(_a0 *s3manager.UploadOutput, _a1 error) *UploaderAPI_UploadWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UploaderAPI_UploadWithContext_Call) RunAndReturn(run func(aws.Context, *s3manager.UploadInput, ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)) *UploaderAPI_UploadWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewUploaderAPI creates a new instance of UploaderAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUploaderAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *UploaderAPI {
	mock := &UploaderAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
