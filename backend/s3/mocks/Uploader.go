// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	s3manager "github.com/aws/aws-sdk-go/service/s3/s3manager"
)

// Uploader is an autogenerated mock type for the Uploader type
type Uploader struct {
	mock.Mock
}

type Uploader_Expecter struct {
	mock *mock.Mock
}

func (_m *Uploader) EXPECT() *Uploader_Expecter {
	return &Uploader_Expecter{mock: &_m.Mock}
}

// UploadWithContext provides a mock function with given fields: ctx, input, opts
func (_m *Uploader) UploadWithContext(ctx context.Context, input *s3manager.UploadInput, opts ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UploadWithContext")
	}

	var r0 *s3manager.UploadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3manager.UploadInput, ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)); ok {
		return rf(ctx, input, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3manager.UploadInput, ...func(*s3manager.Uploader)) *s3manager.UploadOutput); ok {
		r0 = rf(ctx, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3manager.UploadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3manager.UploadInput, ...func(*s3manager.Uploader)) error); ok {
		r1 = rf(ctx, input, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uploader_UploadWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadWithContext'
type Uploader_UploadWithContext_Call struct {
	*mock.Call
}

// UploadWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - input *s3manager.UploadInput
//   - opts ...func(*s3manager.Uploader)
func (_e *Uploader_Expecter) UploadWithContext(ctx interface{}, input interface{}, opts ...interface{}) *Uploader_UploadWithContext_Call {
	return &Uploader_UploadWithContext_Call{Call: _e.mock.On("UploadWithContext",
		append([]interface{}{ctx, input}, opts...)...)}
}

func (_c *Uploader_UploadWithContext_Call) Run(run func(ctx context.Context, input *s3manager.UploadInput, opts ...func(*s3manager.Uploader))) *Uploader_UploadWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*s3manager.Uploader), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*s3manager.Uploader))
			}
		}
		run(args[0].(context.Context), args[1].(*s3manager.UploadInput), variadicArgs...)
	})
	return _c
}

func (_c *Uploader_UploadWithContext_Call) Return(_a0 *s3manager.UploadOutput, _a1 error) *Uploader_UploadWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Uploader_UploadWithContext_Call) RunAndReturn(run func(context.Context, *s3manager.UploadInput, ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)) *Uploader_UploadWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewUploader creates a new instance of Uploader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUploader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Uploader {
	mock := &Uploader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
