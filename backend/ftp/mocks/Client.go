// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import io "io"
import jlaffayeftp "github.com/jlaffaye/ftp"
import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Delete provides a mock function with given fields: path
func (_m *Client) Delete(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: p
func (_m *Client) List(p string) ([]*jlaffayeftp.Entry, error) {
	ret := _m.Called(p)

	var r0 []*jlaffayeftp.Entry
	if rf, ok := ret.Get(0).(func(string) []*jlaffayeftp.Entry); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*jlaffayeftp.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: user, password
func (_m *Client) Login(user string, password string) error {
	ret := _m.Called(user, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(user, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MakeDir provides a mock function with given fields: path
func (_m *Client) MakeDir(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NameList provides a mock function with given fields: path
func (_m *Client) NameList(path string) ([]string, error) {
	ret := _m.Called(path)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Quit provides a mock function with given fields:
func (_m *Client) Quit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rename provides a mock function with given fields: from, to
func (_m *Client) Rename(from string, to string) error {
	ret := _m.Called(from, to)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(from, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrFrom provides a mock function with given fields: path, offset
func (_m *Client) RetrFrom(path string, offset uint64) (*jlaffayeftp.Response, error) {
	ret := _m.Called(path, offset)

	var r0 *jlaffayeftp.Response
	if rf, ok := ret.Get(0).(func(string, uint64) *jlaffayeftp.Response); ok {
		r0 = rf(path, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jlaffayeftp.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint64) error); ok {
		r1 = rf(path, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorFrom provides a mock function with given fields: path, r, offset
func (_m *Client) StorFrom(path string, r io.Reader, offset uint64) error {
	ret := _m.Called(path, r, offset)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, io.Reader, uint64) error); ok {
		r0 = rf(path, r, offset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
