// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	ftp "github.com/jlaffaye/ftp"
	mock "github.com/stretchr/testify/mock"

	time "time"

	types "github.com/c2fo/vfs/v6/backend/ftp/types"
)

// DataConn is an autogenerated mock type for the DataConn type
type DataConn struct {
	mock.Mock
}

type DataConn_Expecter struct {
	mock *mock.Mock
}

func (_m *DataConn) EXPECT() *DataConn_Expecter {
	return &DataConn_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *DataConn) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataConn_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type DataConn_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *DataConn_Expecter) Close() *DataConn_Close_Call {
	return &DataConn_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *DataConn_Close_Call) Run(run func()) *DataConn_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DataConn_Close_Call) Return(_a0 error) *DataConn_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataConn_Close_Call) RunAndReturn(run func() error) *DataConn_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: path
func (_m *DataConn) Delete(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataConn_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type DataConn_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - path string
func (_e *DataConn_Expecter) Delete(path interface{}) *DataConn_Delete_Call {
	return &DataConn_Delete_Call{Call: _e.mock.On("Delete", path)}
}

func (_c *DataConn_Delete_Call) Run(run func(path string)) *DataConn_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DataConn_Delete_Call) Return(_a0 error) *DataConn_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataConn_Delete_Call) RunAndReturn(run func(string) error) *DataConn_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntry provides a mock function with given fields: p
func (_m *DataConn) GetEntry(p string) (*ftp.Entry, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for GetEntry")
	}

	var r0 *ftp.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ftp.Entry, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func(string) *ftp.Entry); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ftp.Entry)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataConn_GetEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntry'
type DataConn_GetEntry_Call struct {
	*mock.Call
}

// GetEntry is a helper method to define mock.On call
//   - p string
func (_e *DataConn_Expecter) GetEntry(p interface{}) *DataConn_GetEntry_Call {
	return &DataConn_GetEntry_Call{Call: _e.mock.On("GetEntry", p)}
}

func (_c *DataConn_GetEntry_Call) Run(run func(p string)) *DataConn_GetEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DataConn_GetEntry_Call) Return(_a0 *ftp.Entry, _a1 error) *DataConn_GetEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataConn_GetEntry_Call) RunAndReturn(run func(string) (*ftp.Entry, error)) *DataConn_GetEntry_Call {
	_c.Call.Return(run)
	return _c
}

// IsSetTimeSupported provides a mock function with given fields:
func (_m *DataConn) IsSetTimeSupported() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSetTimeSupported")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DataConn_IsSetTimeSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSetTimeSupported'
type DataConn_IsSetTimeSupported_Call struct {
	*mock.Call
}

// IsSetTimeSupported is a helper method to define mock.On call
func (_e *DataConn_Expecter) IsSetTimeSupported() *DataConn_IsSetTimeSupported_Call {
	return &DataConn_IsSetTimeSupported_Call{Call: _e.mock.On("IsSetTimeSupported")}
}

func (_c *DataConn_IsSetTimeSupported_Call) Run(run func()) *DataConn_IsSetTimeSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DataConn_IsSetTimeSupported_Call) Return(_a0 bool) *DataConn_IsSetTimeSupported_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataConn_IsSetTimeSupported_Call) RunAndReturn(run func() bool) *DataConn_IsSetTimeSupported_Call {
	_c.Call.Return(run)
	return _c
}

// IsTimePreciseInList provides a mock function with given fields:
func (_m *DataConn) IsTimePreciseInList() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsTimePreciseInList")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DataConn_IsTimePreciseInList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTimePreciseInList'
type DataConn_IsTimePreciseInList_Call struct {
	*mock.Call
}

// IsTimePreciseInList is a helper method to define mock.On call
func (_e *DataConn_Expecter) IsTimePreciseInList() *DataConn_IsTimePreciseInList_Call {
	return &DataConn_IsTimePreciseInList_Call{Call: _e.mock.On("IsTimePreciseInList")}
}

func (_c *DataConn_IsTimePreciseInList_Call) Run(run func()) *DataConn_IsTimePreciseInList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DataConn_IsTimePreciseInList_Call) Return(_a0 bool) *DataConn_IsTimePreciseInList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataConn_IsTimePreciseInList_Call) RunAndReturn(run func() bool) *DataConn_IsTimePreciseInList_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: p
func (_m *DataConn) List(p string) ([]*ftp.Entry, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*ftp.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*ftp.Entry, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func(string) []*ftp.Entry); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ftp.Entry)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataConn_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type DataConn_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - p string
func (_e *DataConn_Expecter) List(p interface{}) *DataConn_List_Call {
	return &DataConn_List_Call{Call: _e.mock.On("List", p)}
}

func (_c *DataConn_List_Call) Run(run func(p string)) *DataConn_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DataConn_List_Call) Return(_a0 []*ftp.Entry, _a1 error) *DataConn_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataConn_List_Call) RunAndReturn(run func(string) ([]*ftp.Entry, error)) *DataConn_List_Call {
	_c.Call.Return(run)
	return _c
}

// MakeDir provides a mock function with given fields: path
func (_m *DataConn) MakeDir(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for MakeDir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataConn_MakeDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeDir'
type DataConn_MakeDir_Call struct {
	*mock.Call
}

// MakeDir is a helper method to define mock.On call
//   - path string
func (_e *DataConn_Expecter) MakeDir(path interface{}) *DataConn_MakeDir_Call {
	return &DataConn_MakeDir_Call{Call: _e.mock.On("MakeDir", path)}
}

func (_c *DataConn_MakeDir_Call) Run(run func(path string)) *DataConn_MakeDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DataConn_MakeDir_Call) Return(_a0 error) *DataConn_MakeDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataConn_MakeDir_Call) RunAndReturn(run func(string) error) *DataConn_MakeDir_Call {
	_c.Call.Return(run)
	return _c
}

// Mode provides a mock function with given fields:
func (_m *DataConn) Mode() types.OpenType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Mode")
	}

	var r0 types.OpenType
	if rf, ok := ret.Get(0).(func() types.OpenType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.OpenType)
	}

	return r0
}

// DataConn_Mode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mode'
type DataConn_Mode_Call struct {
	*mock.Call
}

// Mode is a helper method to define mock.On call
func (_e *DataConn_Expecter) Mode() *DataConn_Mode_Call {
	return &DataConn_Mode_Call{Call: _e.mock.On("Mode")}
}

func (_c *DataConn_Mode_Call) Run(run func()) *DataConn_Mode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DataConn_Mode_Call) Return(_a0 types.OpenType) *DataConn_Mode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataConn_Mode_Call) RunAndReturn(run func() types.OpenType) *DataConn_Mode_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: p
func (_m *DataConn) Read(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataConn_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type DataConn_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - p []byte
func (_e *DataConn_Expecter) Read(p interface{}) *DataConn_Read_Call {
	return &DataConn_Read_Call{Call: _e.mock.On("Read", p)}
}

func (_c *DataConn_Read_Call) Run(run func(p []byte)) *DataConn_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *DataConn_Read_Call) Return(n int, err error) *DataConn_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *DataConn_Read_Call) RunAndReturn(run func([]byte) (int, error)) *DataConn_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Rename provides a mock function with given fields: from, to
func (_m *DataConn) Rename(from string, to string) error {
	ret := _m.Called(from, to)

	if len(ret) == 0 {
		panic("no return value specified for Rename")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(from, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataConn_Rename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rename'
type DataConn_Rename_Call struct {
	*mock.Call
}

// Rename is a helper method to define mock.On call
//   - from string
//   - to string
func (_e *DataConn_Expecter) Rename(from interface{}, to interface{}) *DataConn_Rename_Call {
	return &DataConn_Rename_Call{Call: _e.mock.On("Rename", from, to)}
}

func (_c *DataConn_Rename_Call) Run(run func(from string, to string)) *DataConn_Rename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *DataConn_Rename_Call) Return(_a0 error) *DataConn_Rename_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataConn_Rename_Call) RunAndReturn(run func(string, string) error) *DataConn_Rename_Call {
	_c.Call.Return(run)
	return _c
}

// SetTime provides a mock function with given fields: path, t
func (_m *DataConn) SetTime(path string, t time.Time) error {
	ret := _m.Called(path, t)

	if len(ret) == 0 {
		panic("no return value specified for SetTime")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Time) error); ok {
		r0 = rf(path, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataConn_SetTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTime'
type DataConn_SetTime_Call struct {
	*mock.Call
}

// SetTime is a helper method to define mock.On call
//   - path string
//   - t time.Time
func (_e *DataConn_Expecter) SetTime(path interface{}, t interface{}) *DataConn_SetTime_Call {
	return &DataConn_SetTime_Call{Call: _e.mock.On("SetTime", path, t)}
}

func (_c *DataConn_SetTime_Call) Run(run func(path string, t time.Time)) *DataConn_SetTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Time))
	})
	return _c
}

func (_c *DataConn_SetTime_Call) Return(_a0 error) *DataConn_SetTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataConn_SetTime_Call) RunAndReturn(run func(string, time.Time) error) *DataConn_SetTime_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: p
func (_m *DataConn) Write(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataConn_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type DataConn_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - p []byte
func (_e *DataConn_Expecter) Write(p interface{}) *DataConn_Write_Call {
	return &DataConn_Write_Call{Call: _e.mock.On("Write", p)}
}

func (_c *DataConn_Write_Call) Run(run func(p []byte)) *DataConn_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *DataConn_Write_Call) Return(n int, err error) *DataConn_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *DataConn_Write_Call) RunAndReturn(run func([]byte) (int, error)) *DataConn_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewDataConn creates a new instance of DataConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataConn {
	mock := &DataConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
