// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	types "github.com/c2fo/vfs/v6/backend/ftp/types"
	mock "github.com/stretchr/testify/mock"
)

// DataConn is an autogenerated mock type for the DataConn type
type DataConn struct {
	mock.Mock
}

type DataConn_Expecter struct {
	mock *mock.Mock
}

func (_m *DataConn) EXPECT() *DataConn_Expecter {
	return &DataConn_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *DataConn) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataConn_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type DataConn_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *DataConn_Expecter) Close() *DataConn_Close_Call {
	return &DataConn_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *DataConn_Close_Call) Run(run func()) *DataConn_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DataConn_Close_Call) Return(_a0 error) *DataConn_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

// Mode provides a mock function with given fields:
func (_m *DataConn) Mode() types.OpenType {
	ret := _m.Called()

	var r0 types.OpenType
	if rf, ok := ret.Get(0).(func() types.OpenType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.OpenType)
	}

	return r0
}

// DataConn_Mode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mode'
type DataConn_Mode_Call struct {
	*mock.Call
}

// Mode is a helper method to define mock.On call
func (_e *DataConn_Expecter) Mode() *DataConn_Mode_Call {
	return &DataConn_Mode_Call{Call: _e.mock.On("Mode")}
}

func (_c *DataConn_Mode_Call) Run(run func()) *DataConn_Mode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DataConn_Mode_Call) Return(_a0 types.OpenType) *DataConn_Mode_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewDataConn interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataConn creates a new instance of DataConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataConn(t mockConstructorTestingTNewDataConn) *DataConn {
	mock := &DataConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
