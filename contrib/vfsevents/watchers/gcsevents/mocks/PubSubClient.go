// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"cloud.google.com/go/pubsub"
	mock "github.com/stretchr/testify/mock"
)

// NewPubSubClient creates a new instance of PubSubClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPubSubClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PubSubClient {
	mock := &PubSubClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PubSubClient is an autogenerated mock type for the PubSubClient type
type PubSubClient struct {
	mock.Mock
}

type PubSubClient_Expecter struct {
	mock *mock.Mock
}

func (_m *PubSubClient) EXPECT() *PubSubClient_Expecter {
	return &PubSubClient_Expecter{mock: &_m.Mock}
}

// Receive provides a mock function for the type PubSubClient
func (_mock *PubSubClient) Receive(ctx context.Context, f func(context.Context, *pubsub.Message)) error {
	ret := _mock.Called(ctx, f)

	if len(ret) == 0 {
		panic("no return value specified for Receive")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(context.Context, *pubsub.Message)) error); ok {
		r0 = returnFunc(ctx, f)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PubSubClient_Receive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Receive'
type PubSubClient_Receive_Call struct {
	*mock.Call
}

// Receive is a helper method to define mock.On call
//   - ctx context.Context
//   - f func(context.Context, *pubsub.Message)
func (_e *PubSubClient_Expecter) Receive(ctx interface{}, f interface{}) *PubSubClient_Receive_Call {
	return &PubSubClient_Receive_Call{Call: _e.mock.On("Receive", ctx, f)}
}

func (_c *PubSubClient_Receive_Call) Run(run func(ctx context.Context, f func(context.Context, *pubsub.Message))) *PubSubClient_Receive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(context.Context, *pubsub.Message)
		if args[1] != nil {
			arg1 = args[1].(func(context.Context, *pubsub.Message))
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PubSubClient_Receive_Call) Return(err error) *PubSubClient_Receive_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PubSubClient_Receive_Call) RunAndReturn(run func(ctx context.Context, f func(context.Context, *pubsub.Message)) error) *PubSubClient_Receive_Call {
	_c.Call.Return(run)
	return _c
}
