// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/c2fo/vfs/contrib/vfsevents"
	mock "github.com/stretchr/testify/mock"
)

// NewWatcher creates a new instance of Watcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Watcher {
	mock := &Watcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Watcher is an autogenerated mock type for the Watcher type
type Watcher struct {
	mock.Mock
}

type Watcher_Expecter struct {
	mock *mock.Mock
}

func (_m *Watcher) EXPECT() *Watcher_Expecter {
	return &Watcher_Expecter{mock: &_m.Mock}
}

// Start provides a mock function for the type Watcher
func (_mock *Watcher) Start(ctx context.Context, handler vfsevents.HandlerFunc, errHandler vfsevents.ErrorHandlerFunc, opts ...vfsevents.StartOption) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, handler, errHandler, opts)
	} else {
		tmpRet = _mock.Called(ctx, handler, errHandler)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, vfsevents.HandlerFunc, vfsevents.ErrorHandlerFunc, ...vfsevents.StartOption) error); ok {
		r0 = returnFunc(ctx, handler, errHandler, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Watcher_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Watcher_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - handler vfsevents.HandlerFunc
//   - errHandler vfsevents.ErrorHandlerFunc
//   - opts ...vfsevents.StartOption
func (_e *Watcher_Expecter) Start(ctx interface{}, handler interface{}, errHandler interface{}, opts ...interface{}) *Watcher_Start_Call {
	return &Watcher_Start_Call{Call: _e.mock.On("Start",
		append([]interface{}{ctx, handler, errHandler}, opts...)...)}
}

func (_c *Watcher_Start_Call) Run(run func(ctx context.Context, handler vfsevents.HandlerFunc, errHandler vfsevents.ErrorHandlerFunc, opts ...vfsevents.StartOption)) *Watcher_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 vfsevents.HandlerFunc
		if args[1] != nil {
			arg1 = args[1].(vfsevents.HandlerFunc)
		}
		var arg2 vfsevents.ErrorHandlerFunc
		if args[2] != nil {
			arg2 = args[2].(vfsevents.ErrorHandlerFunc)
		}
		var arg3 []vfsevents.StartOption
		var variadicArgs []vfsevents.StartOption
		if len(args) > 3 {
			variadicArgs = args[3].([]vfsevents.StartOption)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *Watcher_Start_Call) Return(err error) *Watcher_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Watcher_Start_Call) RunAndReturn(run func(ctx context.Context, handler vfsevents.HandlerFunc, errHandler vfsevents.ErrorHandlerFunc, opts ...vfsevents.StartOption) error) *Watcher_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type Watcher
func (_mock *Watcher) Stop(opts ...vfsevents.StopOption) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(opts)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...vfsevents.StopOption) error); ok {
		r0 = returnFunc(opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Watcher_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Watcher_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - opts ...vfsevents.StopOption
func (_e *Watcher_Expecter) Stop(opts ...interface{}) *Watcher_Stop_Call {
	return &Watcher_Stop_Call{Call: _e.mock.On("Stop",
		append([]interface{}{}, opts...)...)}
}

func (_c *Watcher_Stop_Call) Run(run func(opts ...vfsevents.StopOption)) *Watcher_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []vfsevents.StopOption
		var variadicArgs []vfsevents.StopOption
		if len(args) > 0 {
			variadicArgs = args[0].([]vfsevents.StopOption)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *Watcher_Stop_Call) Return(err error) *Watcher_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Watcher_Stop_Call) RunAndReturn(run func(opts ...vfsevents.StopOption) error) *Watcher_Stop_Call {
	_c.Call.Return(run)
	return _c
}
