// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	"github.com/c2fo/vfs/v7"
	"github.com/c2fo/vfs/v7/options"
	mock "github.com/stretchr/testify/mock"
)

// NewFile creates a new instance of File. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *File {
	mock := &File{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// File is an autogenerated mock type for the File type
type File struct {
	mock.Mock
}

type File_Expecter struct {
	mock *mock.Mock
}

func (_m *File) EXPECT() *File_Expecter {
	return &File_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type File
func (_mock *File) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// File_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type File_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *File_Expecter) Close() *File_Close_Call {
	return &File_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *File_Close_Call) Run(run func()) *File_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *File_Close_Call) Return(err error) *File_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *File_Close_Call) RunAndReturn(run func() error) *File_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CopyToFile provides a mock function for the type File
func (_mock *File) CopyToFile(file vfs.File) error {
	ret := _mock.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for CopyToFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(vfs.File) error); ok {
		r0 = returnFunc(file)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// File_CopyToFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyToFile'
type File_CopyToFile_Call struct {
	*mock.Call
}

// CopyToFile is a helper method to define mock.On call
//   - file vfs.File
func (_e *File_Expecter) CopyToFile(file interface{}) *File_CopyToFile_Call {
	return &File_CopyToFile_Call{Call: _e.mock.On("CopyToFile", file)}
}

func (_c *File_CopyToFile_Call) Run(run func(file vfs.File)) *File_CopyToFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 vfs.File
		if args[0] != nil {
			arg0 = args[0].(vfs.File)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *File_CopyToFile_Call) Return(err error) *File_CopyToFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *File_CopyToFile_Call) RunAndReturn(run func(file vfs.File) error) *File_CopyToFile_Call {
	_c.Call.Return(run)
	return _c
}

// CopyToLocation provides a mock function for the type File
func (_mock *File) CopyToLocation(location vfs.Location) (vfs.File, error) {
	ret := _mock.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for CopyToLocation")
	}

	var r0 vfs.File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(vfs.Location) (vfs.File, error)); ok {
		return returnFunc(location)
	}
	if returnFunc, ok := ret.Get(0).(func(vfs.Location) vfs.File); ok {
		r0 = returnFunc(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vfs.File)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(vfs.Location) error); ok {
		r1 = returnFunc(location)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// File_CopyToLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyToLocation'
type File_CopyToLocation_Call struct {
	*mock.Call
}

// CopyToLocation is a helper method to define mock.On call
//   - location vfs.Location
func (_e *File_Expecter) CopyToLocation(location interface{}) *File_CopyToLocation_Call {
	return &File_CopyToLocation_Call{Call: _e.mock.On("CopyToLocation", location)}
}

func (_c *File_CopyToLocation_Call) Run(run func(location vfs.Location)) *File_CopyToLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 vfs.Location
		if args[0] != nil {
			arg0 = args[0].(vfs.Location)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *File_CopyToLocation_Call) Return(file vfs.File, err error) *File_CopyToLocation_Call {
	_c.Call.Return(file, err)
	return _c
}

func (_c *File_CopyToLocation_Call) RunAndReturn(run func(location vfs.Location) (vfs.File, error)) *File_CopyToLocation_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type File
func (_mock *File) Delete(opts ...options.DeleteOption) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(opts)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...options.DeleteOption) error); ok {
		r0 = returnFunc(opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// File_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type File_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - opts ...options.DeleteOption
func (_e *File_Expecter) Delete(opts ...interface{}) *File_Delete_Call {
	return &File_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{}, opts...)...)}
}

func (_c *File_Delete_Call) Run(run func(opts ...options.DeleteOption)) *File_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []options.DeleteOption
		var variadicArgs []options.DeleteOption
		if len(args) > 0 {
			variadicArgs = args[0].([]options.DeleteOption)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *File_Delete_Call) Return(err error) *File_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *File_Delete_Call) RunAndReturn(run func(opts ...options.DeleteOption) error) *File_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type File
func (_mock *File) Exists() (bool, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (bool, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// File_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type File_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
func (_e *File_Expecter) Exists() *File_Exists_Call {
	return &File_Exists_Call{Call: _e.mock.On("Exists")}
}

func (_c *File_Exists_Call) Run(run func()) *File_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *File_Exists_Call) Return(b bool, err error) *File_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *File_Exists_Call) RunAndReturn(run func() (bool, error)) *File_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// LastModified provides a mock function for the type File
func (_mock *File) LastModified() (*time.Time, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastModified")
	}

	var r0 *time.Time
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*time.Time, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *time.Time); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// File_LastModified_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastModified'
type File_LastModified_Call struct {
	*mock.Call
}

// LastModified is a helper method to define mock.On call
func (_e *File_Expecter) LastModified() *File_LastModified_Call {
	return &File_LastModified_Call{Call: _e.mock.On("LastModified")}
}

func (_c *File_LastModified_Call) Run(run func()) *File_LastModified_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *File_LastModified_Call) Return(time1 *time.Time, err error) *File_LastModified_Call {
	_c.Call.Return(time1, err)
	return _c
}

func (_c *File_LastModified_Call) RunAndReturn(run func() (*time.Time, error)) *File_LastModified_Call {
	_c.Call.Return(run)
	return _c
}

// Location provides a mock function for the type File
func (_mock *File) Location() vfs.Location {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Location")
	}

	var r0 vfs.Location
	if returnFunc, ok := ret.Get(0).(func() vfs.Location); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vfs.Location)
		}
	}
	return r0
}

// File_Location_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Location'
type File_Location_Call struct {
	*mock.Call
}

// Location is a helper method to define mock.On call
func (_e *File_Expecter) Location() *File_Location_Call {
	return &File_Location_Call{Call: _e.mock.On("Location")}
}

func (_c *File_Location_Call) Run(run func()) *File_Location_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *File_Location_Call) Return(location vfs.Location) *File_Location_Call {
	_c.Call.Return(location)
	return _c
}

func (_c *File_Location_Call) RunAndReturn(run func() vfs.Location) *File_Location_Call {
	_c.Call.Return(run)
	return _c
}

// MoveToFile provides a mock function for the type File
func (_mock *File) MoveToFile(file vfs.File) error {
	ret := _mock.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for MoveToFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(vfs.File) error); ok {
		r0 = returnFunc(file)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// File_MoveToFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MoveToFile'
type File_MoveToFile_Call struct {
	*mock.Call
}

// MoveToFile is a helper method to define mock.On call
//   - file vfs.File
func (_e *File_Expecter) MoveToFile(file interface{}) *File_MoveToFile_Call {
	return &File_MoveToFile_Call{Call: _e.mock.On("MoveToFile", file)}
}

func (_c *File_MoveToFile_Call) Run(run func(file vfs.File)) *File_MoveToFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 vfs.File
		if args[0] != nil {
			arg0 = args[0].(vfs.File)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *File_MoveToFile_Call) Return(err error) *File_MoveToFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *File_MoveToFile_Call) RunAndReturn(run func(file vfs.File) error) *File_MoveToFile_Call {
	_c.Call.Return(run)
	return _c
}

// MoveToLocation provides a mock function for the type File
func (_mock *File) MoveToLocation(location vfs.Location) (vfs.File, error) {
	ret := _mock.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for MoveToLocation")
	}

	var r0 vfs.File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(vfs.Location) (vfs.File, error)); ok {
		return returnFunc(location)
	}
	if returnFunc, ok := ret.Get(0).(func(vfs.Location) vfs.File); ok {
		r0 = returnFunc(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vfs.File)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(vfs.Location) error); ok {
		r1 = returnFunc(location)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// File_MoveToLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MoveToLocation'
type File_MoveToLocation_Call struct {
	*mock.Call
}

// MoveToLocation is a helper method to define mock.On call
//   - location vfs.Location
func (_e *File_Expecter) MoveToLocation(location interface{}) *File_MoveToLocation_Call {
	return &File_MoveToLocation_Call{Call: _e.mock.On("MoveToLocation", location)}
}

func (_c *File_MoveToLocation_Call) Run(run func(location vfs.Location)) *File_MoveToLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 vfs.Location
		if args[0] != nil {
			arg0 = args[0].(vfs.Location)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *File_MoveToLocation_Call) Return(file vfs.File, err error) *File_MoveToLocation_Call {
	_c.Call.Return(file, err)
	return _c
}

func (_c *File_MoveToLocation_Call) RunAndReturn(run func(location vfs.Location) (vfs.File, error)) *File_MoveToLocation_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type File
func (_mock *File) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// File_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type File_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *File_Expecter) Name() *File_Name_Call {
	return &File_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *File_Name_Call) Run(run func()) *File_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *File_Name_Call) Return(s string) *File_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *File_Name_Call) RunAndReturn(run func() string) *File_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function for the type File
func (_mock *File) Path() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// File_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type File_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *File_Expecter) Path() *File_Path_Call {
	return &File_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *File_Path_Call) Run(run func()) *File_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *File_Path_Call) Return(s string) *File_Path_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *File_Path_Call) RunAndReturn(run func() string) *File_Path_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type File
func (_mock *File) Read(p []byte) (int, error) {
	ret := _mock.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(p)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(p)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// File_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type File_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - p []byte
func (_e *File_Expecter) Read(p interface{}) *File_Read_Call {
	return &File_Read_Call{Call: _e.mock.On("Read", p)}
}

func (_c *File_Read_Call) Run(run func(p []byte)) *File_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *File_Read_Call) Return(n int, err error) *File_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *File_Read_Call) RunAndReturn(run func(p []byte) (int, error)) *File_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Seek provides a mock function for the type File
func (_mock *File) Seek(offset int64, whence int) (int64, error) {
	ret := _mock.Called(offset, whence)

	if len(ret) == 0 {
		panic("no return value specified for Seek")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64, int) (int64, error)); ok {
		return returnFunc(offset, whence)
	}
	if returnFunc, ok := ret.Get(0).(func(int64, int) int64); ok {
		r0 = returnFunc(offset, whence)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = returnFunc(offset, whence)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// File_Seek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seek'
type File_Seek_Call struct {
	*mock.Call
}

// Seek is a helper method to define mock.On call
//   - offset int64
//   - whence int
func (_e *File_Expecter) Seek(offset interface{}, whence interface{}) *File_Seek_Call {
	return &File_Seek_Call{Call: _e.mock.On("Seek", offset, whence)}
}

func (_c *File_Seek_Call) Run(run func(offset int64, whence int)) *File_Seek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *File_Seek_Call) Return(n int64, err error) *File_Seek_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *File_Seek_Call) RunAndReturn(run func(offset int64, whence int) (int64, error)) *File_Seek_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function for the type File
func (_mock *File) Size() (uint64, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (uint64, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() uint64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint64)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// File_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type File_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *File_Expecter) Size() *File_Size_Call {
	return &File_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *File_Size_Call) Run(run func()) *File_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *File_Size_Call) Return(v uint64, err error) *File_Size_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *File_Size_Call) RunAndReturn(run func() (uint64, error)) *File_Size_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function for the type File
func (_mock *File) String() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// File_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type File_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *File_Expecter) String() *File_String_Call {
	return &File_String_Call{Call: _e.mock.On("String")}
}

func (_c *File_String_Call) Run(run func()) *File_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *File_String_Call) Return(s string) *File_String_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *File_String_Call) RunAndReturn(run func() string) *File_String_Call {
	_c.Call.Return(run)
	return _c
}

// Touch provides a mock function for the type File
func (_mock *File) Touch() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Touch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// File_Touch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Touch'
type File_Touch_Call struct {
	*mock.Call
}

// Touch is a helper method to define mock.On call
func (_e *File_Expecter) Touch() *File_Touch_Call {
	return &File_Touch_Call{Call: _e.mock.On("Touch")}
}

func (_c *File_Touch_Call) Run(run func()) *File_Touch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *File_Touch_Call) Return(err error) *File_Touch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *File_Touch_Call) RunAndReturn(run func() error) *File_Touch_Call {
	_c.Call.Return(run)
	return _c
}

// URI provides a mock function for the type File
func (_mock *File) URI() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for URI")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// File_URI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'URI'
type File_URI_Call struct {
	*mock.Call
}

// URI is a helper method to define mock.On call
func (_e *File_Expecter) URI() *File_URI_Call {
	return &File_URI_Call{Call: _e.mock.On("URI")}
}

func (_c *File_URI_Call) Run(run func()) *File_URI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *File_URI_Call) Return(s string) *File_URI_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *File_URI_Call) RunAndReturn(run func() string) *File_URI_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type File
func (_mock *File) Write(p []byte) (int, error) {
	ret := _mock.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(p)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(p)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// File_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type File_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - p []byte
func (_e *File_Expecter) Write(p interface{}) *File_Write_Call {
	return &File_Write_Call{Call: _e.mock.On("Write", p)}
}

func (_c *File_Write_Call) Run(run func(p []byte)) *File_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *File_Write_Call) Return(n int, err error) *File_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *File_Write_Call) RunAndReturn(run func(p []byte) (int, error)) *File_Write_Call {
	_c.Call.Return(run)
	return _c
}
