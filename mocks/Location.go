// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	options "github.com/c2fo/vfs/v6/options"
	mock "github.com/stretchr/testify/mock"

	regexp "regexp"

	vfs "github.com/c2fo/vfs/v6"
)

// Location is an autogenerated mock type for the Location type
type Location struct {
	mock.Mock
}

// ChangeDir provides a mock function with given fields: relLocPath
func (_m *Location) ChangeDir(relLocPath string) error {
	ret := _m.Called(relLocPath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(relLocPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFile provides a mock function with given fields: relFilePath, deleteOpts
func (_m *Location) DeleteFile(relFilePath string, deleteOpts ...options.DeleteOption) error {
	_va := make([]interface{}, len(deleteOpts))
	for _i := range deleteOpts {
		_va[_i] = deleteOpts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, relFilePath)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...options.DeleteOption) error); ok {
		r0 = rf(relFilePath, deleteOpts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields:
func (_m *Location) Exists() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileSystem provides a mock function with given fields:
func (_m *Location) FileSystem() vfs.FileSystem {
	ret := _m.Called()

	var r0 vfs.FileSystem
	if rf, ok := ret.Get(0).(func() vfs.FileSystem); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vfs.FileSystem)
		}
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *Location) List() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByPrefix provides a mock function with given fields: prefix
func (_m *Location) ListByPrefix(prefix string) ([]string, error) {
	ret := _m.Called(prefix)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByRegex provides a mock function with given fields: regex
func (_m *Location) ListByRegex(regex *regexp.Regexp) ([]string, error) {
	ret := _m.Called(regex)

	var r0 []string
	if rf, ok := ret.Get(0).(func(*regexp.Regexp) []string); ok {
		r0 = rf(regex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*regexp.Regexp) error); ok {
		r1 = rf(regex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFile provides a mock function with given fields: relFilePath
func (_m *Location) NewFile(relFilePath string) (vfs.File, error) {
	ret := _m.Called(relFilePath)

	var r0 vfs.File
	if rf, ok := ret.Get(0).(func(string) vfs.File); ok {
		r0 = rf(relFilePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vfs.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(relFilePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLocation provides a mock function with given fields: relLocPath
func (_m *Location) NewLocation(relLocPath string) (vfs.Location, error) {
	ret := _m.Called(relLocPath)

	var r0 vfs.Location
	if rf, ok := ret.Get(0).(func(string) vfs.Location); ok {
		r0 = rf(relLocPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vfs.Location)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(relLocPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Path provides a mock function with given fields:
func (_m *Location) Path() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *Location) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// URI provides a mock function with given fields:
func (_m *Location) URI() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Volume provides a mock function with given fields:
func (_m *Location) Volume() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type NewLocationT interface {
	mock.TestingT
	Cleanup(func())
}

// NewLocation creates a new instance of Location. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLocation(t NewLocationT) *Location {
	mock := &Location{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
