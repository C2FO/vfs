// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/c2fo/vfs/v7"
	"github.com/c2fo/vfs/v7/options"
	mock "github.com/stretchr/testify/mock"
)

// NewFileSystem creates a new instance of FileSystem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileSystem(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileSystem {
	mock := &FileSystem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FileSystem is an autogenerated mock type for the FileSystem type
type FileSystem struct {
	mock.Mock
}

type FileSystem_Expecter struct {
	mock *mock.Mock
}

func (_m *FileSystem) EXPECT() *FileSystem_Expecter {
	return &FileSystem_Expecter{mock: &_m.Mock}
}

// Name provides a mock function for the type FileSystem
func (_mock *FileSystem) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// FileSystem_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type FileSystem_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *FileSystem_Expecter) Name() *FileSystem_Name_Call {
	return &FileSystem_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *FileSystem_Name_Call) Run(run func()) *FileSystem_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FileSystem_Name_Call) Return(s string) *FileSystem_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *FileSystem_Name_Call) RunAndReturn(run func() string) *FileSystem_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewFile provides a mock function for the type FileSystem
func (_mock *FileSystem) NewFile(authority string, absFilePath string, opts ...options.NewFileOption) (vfs.File, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(authority, absFilePath, opts)
	} else {
		tmpRet = _mock.Called(authority, absFilePath)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for NewFile")
	}

	var r0 vfs.File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, ...options.NewFileOption) (vfs.File, error)); ok {
		return returnFunc(authority, absFilePath, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, ...options.NewFileOption) vfs.File); ok {
		r0 = returnFunc(authority, absFilePath, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vfs.File)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, ...options.NewFileOption) error); ok {
		r1 = returnFunc(authority, absFilePath, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileSystem_NewFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewFile'
type FileSystem_NewFile_Call struct {
	*mock.Call
}

// NewFile is a helper method to define mock.On call
//   - authority string
//   - absFilePath string
//   - opts ...options.NewFileOption
func (_e *FileSystem_Expecter) NewFile(authority interface{}, absFilePath interface{}, opts ...interface{}) *FileSystem_NewFile_Call {
	return &FileSystem_NewFile_Call{Call: _e.mock.On("NewFile",
		append([]interface{}{authority, absFilePath}, opts...)...)}
}

func (_c *FileSystem_NewFile_Call) Run(run func(authority string, absFilePath string, opts ...options.NewFileOption)) *FileSystem_NewFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []options.NewFileOption
		var variadicArgs []options.NewFileOption
		if len(args) > 2 {
			variadicArgs = args[2].([]options.NewFileOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *FileSystem_NewFile_Call) Return(file vfs.File, err error) *FileSystem_NewFile_Call {
	_c.Call.Return(file, err)
	return _c
}

func (_c *FileSystem_NewFile_Call) RunAndReturn(run func(authority string, absFilePath string, opts ...options.NewFileOption) (vfs.File, error)) *FileSystem_NewFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewLocation provides a mock function for the type FileSystem
func (_mock *FileSystem) NewLocation(authority string, absLocPath string) (vfs.Location, error) {
	ret := _mock.Called(authority, absLocPath)

	if len(ret) == 0 {
		panic("no return value specified for NewLocation")
	}

	var r0 vfs.Location
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (vfs.Location, error)); ok {
		return returnFunc(authority, absLocPath)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) vfs.Location); ok {
		r0 = returnFunc(authority, absLocPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vfs.Location)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(authority, absLocPath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileSystem_NewLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewLocation'
type FileSystem_NewLocation_Call struct {
	*mock.Call
}

// NewLocation is a helper method to define mock.On call
//   - authority string
//   - absLocPath string
func (_e *FileSystem_Expecter) NewLocation(authority interface{}, absLocPath interface{}) *FileSystem_NewLocation_Call {
	return &FileSystem_NewLocation_Call{Call: _e.mock.On("NewLocation", authority, absLocPath)}
}

func (_c *FileSystem_NewLocation_Call) Run(run func(authority string, absLocPath string)) *FileSystem_NewLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FileSystem_NewLocation_Call) Return(location vfs.Location, err error) *FileSystem_NewLocation_Call {
	_c.Call.Return(location, err)
	return _c
}

func (_c *FileSystem_NewLocation_Call) RunAndReturn(run func(authority string, absLocPath string) (vfs.Location, error)) *FileSystem_NewLocation_Call {
	_c.Call.Return(run)
	return _c
}

// Retry provides a mock function for the type FileSystem
func (_mock *FileSystem) Retry() vfs.Retry {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Retry")
	}

	var r0 vfs.Retry
	if returnFunc, ok := ret.Get(0).(func() vfs.Retry); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vfs.Retry)
		}
	}
	return r0
}

// FileSystem_Retry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retry'
type FileSystem_Retry_Call struct {
	*mock.Call
}

// Retry is a helper method to define mock.On call
func (_e *FileSystem_Expecter) Retry() *FileSystem_Retry_Call {
	return &FileSystem_Retry_Call{Call: _e.mock.On("Retry")}
}

func (_c *FileSystem_Retry_Call) Run(run func()) *FileSystem_Retry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FileSystem_Retry_Call) Return(retry vfs.Retry) *FileSystem_Retry_Call {
	_c.Call.Return(retry)
	return _c
}

func (_c *FileSystem_Retry_Call) RunAndReturn(run func() vfs.Retry) *FileSystem_Retry_Call {
	_c.Call.Return(run)
	return _c
}

// Scheme provides a mock function for the type FileSystem
func (_mock *FileSystem) Scheme() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scheme")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// FileSystem_Scheme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scheme'
type FileSystem_Scheme_Call struct {
	*mock.Call
}

// Scheme is a helper method to define mock.On call
func (_e *FileSystem_Expecter) Scheme() *FileSystem_Scheme_Call {
	return &FileSystem_Scheme_Call{Call: _e.mock.On("Scheme")}
}

func (_c *FileSystem_Scheme_Call) Run(run func()) *FileSystem_Scheme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FileSystem_Scheme_Call) Return(s string) *FileSystem_Scheme_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *FileSystem_Scheme_Call) RunAndReturn(run func() string) *FileSystem_Scheme_Call {
	_c.Call.Return(run)
	return _c
}
